/**GENERAL TERMINAL COMMANDS**/
cd = change directory (Folder)
mkdir = make directory
touch = create a new file
rm -rf = remove file / directory
ls = display the list of folders and file of directory in which we are present

/**GIT COMMANDS**/
git init = used to initialize git
git config --global user.email "our email" : used to provide author's identity (email)
git config --global user.name "our name" : used to provide author's identity (name)
git diff <file_name> : check for the differences using command line
git add <filename.extension>= used to add files to staging area (particular file)
git add . = used to add files to staging area (all files)
git add -p <file-name> : adding a single file to staging area paragraph by paragraph
git status = used to check status of file whether they are in staging area or not
git commit = used to commit files to keep track of changes
git log = shows track of commits
git log --oneline = shows track of commit in onelinear
git checkout <commit id> = updates to the given id commit (files remain committed)
git checkout master = updates to the latest commit
git revert <commit id>= create a new commit of the commit which we passed the id of
git reset --soft <commit id> = moves back to staging area of the commit (like a redo to name of the commit)
git reset --mixed <commit id>= moves to the working directory (files are not committed)
git reset --hard <commit id>= moves to the commit deleting all the commits made after that

/**BRANCHES**/

git branch <branch-name> = creates a new branch
git checkout -b <branch-name> = create a new branch and switch to it
git checkout <branch-name> = switch to branch of which name is specified
git branch -a = shows all the branches
git branch -d <branch-name> = deletes the branch of which name is specified
git merge <branch-name> = merge the current branch with the branch name specified

/**CONNECT GIT REMOTELY**/

git remote add origin <repository https link> = connects the git repository with the folder in which you are in
git remote -v = check whether folder is connected to repository or not (if both fetch and push are present, then it is connected)
git pull = takes all the information and update our local repository if branch name is remembered
git pull origin <branch-name> = takes all the info of a specific branch
git push -u origin <push-branch name> = pushes local repository to remote repository and -u is used to remember it
git push origin <push-branch name> = pushes local repository to remote repository
git push = pushes local repository to remote repository if the branch is remembered
git push origin --delete <branch-name> = deletes branch remotely


